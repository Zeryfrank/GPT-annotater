stop_sequences = NULL,
temperature = 0.7,
top_k = -1,
top_p = -1,
api_key = Sys.getenv("anthropic_api_key"),
model = "claude-3-opus-20240229",
api_url = Sys.getenv("anthropic_url")) {
columnname <- base::deparse(base::substitute(column))
filepath <- stringr::str_c("LLMoutput/", columnname, "/", model, "/")
if (!base::dir.exists(filepath)) {
base::dir.create(filepath, recursive = TRUE)
}
base::print(paste("Writing RDS file to:", filepath))
result_df <- data.frame(id = character(), aitag = character(), stringsAsFactors = FALSE)
for (i in 1:length(column)) {
to_annotate_id <- column[i]
to_annotate_text <- stringr::str_replace_all(column[i], "(\n|\r)", " ")
authorization <- paste0("Bearer ", api_key)
# Prepare the prompt
prompt <- list(list(role = "user", content = to_annotate_text))
# Set up the API request
url <- stringr::str_c(api_url, "/v1")
headers <- add_headers(`Authorization` = authorization, `Content-Type` = "application/json")
# Prepare the request body
body <- toJSON(list(
model = model,
max_tokens = max_tokens,
temperature = temperature,
top_k = top_k,
top_p = top_p,
messages = prompt
), auto_unbox = TRUE)
# Send the API request
response <- POST(url, headers, body = body)
if (http_status(response)$category == "Success") {
to_annotate_claudeLabel <- fromJSON(content(response, "text", encoding = "UTF-8"))$content$text
write_rds_path <- stringr::str_c(filepath, to_annotate_id, ".rds")
base::saveRDS(response, write_rds_path)
base::Sys.sleep(0.6)
base::message(i, " of ", length(column))
base::message("status_id: ", to_annotate_id, "\n", "instruction: ", instruction, "\n", "text: ", to_annotate_text)
base::message("Claude: ", to_annotate_claudeLabel, "\n")
# Append the result to the dataframe
result_df <- base::rbind(result_df, data.frame(id = to_annotate_id, aitag = to_annotate_claudeLabel, stringsAsFactors = FALSE))
} else {
base::warning("API request failed with status ", http_status(response)$message)
base::cat("Error details:\n", content(response, "text", encoding = "UTF-8"), "\n")
}
}
return(result_df)
}
my_data <- data.frame(
id = 1:3,
text = c("Example text 1", "Example text 2", "Example text 3")
)
tag_claude(my_data$text, "Be precise and concise.")
tag_claude(my_data$text, "Be precise and concise.")
my_data <- data.frame(
id = 1:3,
text = c("Example text 1", "Example text 2", "Example text 3")
)
tag_claude(my_data$text, "Be precise and concise.")
Sys.setenv("anthropic_api_key"="fdsfasda")
Sys.setenv("anthropic_url" = "http://127.0.0.1:8081/")
tag_claude <- function(column,
instruction = "",
max_tokens = 100,
stop_sequences = NULL,
temperature = 0.7,
top_k = -1,
top_p = -1,
api_key = Sys.getenv("anthropic_api_key"),
model = "claude-3-opus-20240229",
api_url = Sys.getenv("anthropic_url")) {
columnname <- base::deparse(base::substitute(column))
filepath <- stringr::str_c("LLMoutput/", columnname, "/", model, "/")
if (!base::dir.exists(filepath)) {
base::dir.create(filepath, recursive = TRUE)
}
base::print(paste("Writing RDS file to:", filepath))
result_df <- data.frame(id = character(), aitag = character(), stringsAsFactors = FALSE)
for (i in 1:length(column)) {
to_annotate_id <- column[i]
to_annotate_text <- stringr::str_replace_all(column[i], "(\n|\r)", " ")
authorization <- paste0("Bearer ", api_key)
# Prepare the prompt
prompt <- list(list(role = "user", content = to_annotate_text))
# Set up the API request
url <- stringr::str_c(api_url, "/v1")
headers <- add_headers(`Authorization` = authorization, `Content-Type` = "application/json")
# Prepare the request body
body <- toJSON(list(
model = model,
max_tokens = max_tokens,
temperature = temperature,
top_k = top_k,
top_p = top_p,
messages = prompt
), auto_unbox = TRUE)
# Send the API request
response <- POST(url, headers, body = body)
if (http_status(response)$category == "Success") {
to_annotate_claudeLabel <- fromJSON(content(response, "text", encoding = "UTF-8"))$content$text
write_rds_path <- stringr::str_c(filepath, to_annotate_id, ".rds")
base::saveRDS(response, write_rds_path)
base::Sys.sleep(0.6)
base::message(i, " of ", length(column))
base::message("status_id: ", to_annotate_id, "\n", "instruction: ", instruction, "\n", "text: ", to_annotate_text)
base::message("Claude: ", to_annotate_claudeLabel, "\n")
# Append the result to the dataframe
result_df <- base::rbind(result_df, data.frame(id = to_annotate_id, aitag = to_annotate_claudeLabel, stringsAsFactors = FALSE))
} else {
base::warning("API request failed with status ", http_status(response)$message)
base::cat("Error details:\n", content(response, "text", encoding = "UTF-8"), "\n")
}
}
return(result_df)
}
my_data <- data.frame(
id = 1:3,
text = c("Example text 1", "Example text 2", "Example text 3")
)
tag_claude(my_data$text, "Be precise and concise.")
tag_claude <- function(column,
instruction = "",
temperature = 0.5,
api_key = Sys.getenv("claude_key"),
model = "claude-3-opus-20240229",
api_url = Sys.getenv("claude_url")) {
columnname <- base::deparse(base::substitute(column))
filepath <- stringr::str_c("LLMoutput/", columnname, "/", model, "/")
api_url <- stringr::str_c(api_url, "/v1/messages")
if (!base::dir.exists(filepath)) {
base::dir.create(filepath, recursive = TRUE)
}
base::print(paste("Writing RDS file to:", filepath))
result_df <- data.frame(id = character(), aitag = character(), stringsAsFactors = FALSE)
for (i in 1:length(column)) {
to_annotate_id <- column[i]
to_annotate_text <- stringr::str_replace_all(column[i], "(\n|\r)", " ")
authorization <- paste0("Bearer ", api_key)
#retry times
attempt <- 1
max_attempts <- 3
success <- FALSE
while (!success && attempt <= max_attempts) {
try({
response <- httr::POST(
url = api_url,
httr::add_headers(`Content-Type` = "application/json", `Authorization` = authorization),
encode = "json",
body = list(
model = model,
temperature = temperature,
messages = list(
list(role = "system", content = instruction),
list(role = "user", content = to_annotate_text)
)
),
httr::timeout(5000)
)
success <- TRUE
to_annotate_claudeLabel <- httr::content(response)$choices[[1]]$message$content
write_rds_path <- stringr::str_c(filepath, to_annotate_id, ".rds")
base::saveRDS(response, write_rds_path)
base::Sys.sleep(0.6)
base::message(i, " of ", length(column))
base::message("status_id: ", to_annotate_id, "\n", "instruction: ", instruction, "\n", "text: ", to_annotate_text)
base::message("Claude: ", to_annotate_claudeLabel, "\n")
# Append the result to the dataframe
result_df <- rbind(result_df, data.frame(id = to_annotate_id, aitag = to_annotate_claudeLabel, stringsAsFactors = FALSE))
}, silent = FALSE)
if (!success) {
base::Sys.sleep(2)
attempt <- attempt + 1
}
}
if (!success) {
base::stop("Failed to fetch data after ", max_attempts, " attempts.")
}
}
return(result_df)
}
my_data <- data.frame(
id = 1:3,
text = c("Example text 1", "Example text 2", "Example text 3")
)
tag_claude(my_data$text, "Be precise and concise.")
tag_claude <- function(column,
instruction = "",
temperature = 0.5,
api_key = Sys.getenv("anthropic_api_key"),
model = "claude-3-opus-20240229",
api_url = Sys.getenv("anthropic_url")) {
columnname <- base::deparse(base::substitute(column))
filepath <- stringr::str_c("LLMoutput/", columnname, "/", model, "/")
api_url <- stringr::str_c(api_url, "/v1/messages")
if (!base::dir.exists(filepath)) {
base::dir.create(filepath, recursive = TRUE)
}
base::print(paste("Writing RDS file to:", filepath))
result_df <- data.frame(id = character(), aitag = character(), stringsAsFactors = FALSE)
for (i in 1:length(column)) {
to_annotate_id <- column[i]
to_annotate_text <- stringr::str_replace_all(column[i], "(\n|\r)", " ")
authorization <- paste0("Bearer ", api_key)
#retry times
attempt <- 1
max_attempts <- 3
success <- FALSE
while (!success && attempt <= max_attempts) {
try({
response <- httr::POST(
url = api_url,
httr::add_headers(`Content-Type` = "application/json", `Authorization` = authorization),
encode = "json",
body = list(
model = model,
temperature = temperature,
messages = list(
list(role = "system", content = instruction),
list(role = "user", content = to_annotate_text)
)
),
httr::timeout(5000)
)
success <- TRUE
to_annotate_claudeLabel <- httr::content(response)$choices[[1]]$message$content
write_rds_path <- stringr::str_c(filepath, to_annotate_id, ".rds")
base::saveRDS(response, write_rds_path)
base::Sys.sleep(0.6)
base::message(i, " of ", length(column))
base::message("status_id: ", to_annotate_id, "\n", "instruction: ", instruction, "\n", "text: ", to_annotate_text)
base::message("Claude: ", to_annotate_claudeLabel, "\n")
# Append the result to the dataframe
result_df <- rbind(result_df, data.frame(id = to_annotate_id, aitag = to_annotate_claudeLabel, stringsAsFactors = FALSE))
}, silent = FALSE)
if (!success) {
base::Sys.sleep(2)
attempt <- attempt + 1
}
}
if (!success) {
base::stop("Failed to fetch data after ", max_attempts, " attempts.")
}
}
return(result_df)
}
my_data <- data.frame(
id = 1:3,
text = c("Example text 1", "Example text 2", "Example text 3")
)
tag_claude(my_data$text, "Be precise and concise.")
Sys.setenv("anthropic_api_key" = "")
Sys.setenv("anthropic_url" = "http://127.0.0.1:8081/")
tag_claude <- function(column,
instruction = "",
temperature = 0.5,
api_key = Sys.getenv("anthropic_api_key"),
model = "claude-3-opus-20240229",
api_url = Sys.getenv("anthropic_url")) {
columnname <- base::deparse(base::substitute(column))
filepath <- stringr::str_c("LLMoutput/", columnname, "/", model, "/")
api_url <- stringr::str_c(api_url, "/v1/messages")
if (!base::dir.exists(filepath)) {
base::dir.create(filepath, recursive = TRUE)
}
base::print(paste("Writing RDS file to:", filepath))
result_df <- data.frame(id = character(), aitag = character(), stringsAsFactors = FALSE)
for (i in 1:length(column)) {
to_annotate_id <- column[i]
to_annotate_text <- stringr::str_replace_all(column[i], "(\n|\r)", " ")
authorization <- paste0("Bearer ", api_key)
#retry times
attempt <- 1
max_attempts <- 3
success <- FALSE
while (!success && attempt <= max_attempts) {
try({
response <- httr::POST(
url = api_url,
httr::add_headers(`Content-Type` = "application/json", `Authorization` = authorization),
encode = "json",
body = list(
model = model,
temperature = temperature,
messages = list(
list(role = "system", content = instruction),
list(role = "user", content = to_annotate_text)
)
),
httr::timeout(5000)
)
success <- TRUE
to_annotate_claudeLabel <- httr::content(response)$choices[[1]]$message$content
write_rds_path <- stringr::str_c(filepath, to_annotate_id, ".rds")
base::saveRDS(response, write_rds_path)
base::Sys.sleep(0.6)
base::message(i, " of ", length(column))
base::message("status_id: ", to_annotate_id, "\n", "instruction: ", instruction, "\n", "text: ", to_annotate_text)
base::message("Claude: ", to_annotate_claudeLabel, "\n")
# Append the result to the dataframe
result_df <- rbind(result_df, data.frame(id = to_annotate_id, aitag = to_annotate_claudeLabel, stringsAsFactors = FALSE))
}, silent = FALSE)
if (!success) {
base::Sys.sleep(2)
attempt <- attempt + 1
}
}
if (!success) {
base::stop("Failed to fetch data after ", max_attempts, " attempts.")
}
}
return(result_df)
}
my_data <- data.frame(
id = 1:3,
text = c("Example text 1", "Example text 2", "Example text 3")
)
tag_claude(my_data$text, "Be precise and concise.")
library(httr)
library(jsonlite)
Sys.setenv("anthropic_api_key" = "")
Sys.setenv("anthropic_url" = "http://127.0.0.1:8081/")
tag_claude <- function(column,
instruction = "",
temperature = 0.5,
api_key = Sys.getenv("anthropic_api_key"),
model = "claude-3-opus-20240229",
api_url = Sys.getenv("anthropic_url")) {
columnname <- base::deparse(base::substitute(column))
filepath <- stringr::str_c("LLMoutput/", columnname, "/", model, "/")
api_url <- stringr::str_c(api_url, "/v1/messages")
if (!base::dir.exists(filepath)) {
base::dir.create(filepath, recursive = TRUE)
}
base::print(paste("Writing RDS file to:", filepath))
result_df <- data.frame(id = character(), aitag = character(), stringsAsFactors = FALSE)
for (i in 1:length(column)) {
to_annotate_id <- column[i]
to_annotate_text <- stringr::str_replace_all(column[i], "(\n|\r)", " ")
authorization <- paste0(api_key)
#retry times
attempt <- 1
max_attempts <- 3
success <- FALSE
while (!success && attempt <= max_attempts) {
try({
response <- httr::POST(
url = api_url,
httr::add_headers(`Content-Type` = "application/json", `Authorization` = authorization),
encode = "json",
body = list(
model = model,
temperature = temperature,
messages = list(
list(role = "system", content = instruction),
list(role = "user", content = to_annotate_text)
)
),
httr::timeout(5000)
)
success <- TRUE
to_annotate_claudeLabel <- httr::content(response)$choices[[1]]$message$content
write_rds_path <- stringr::str_c(filepath, to_annotate_id, ".rds")
base::saveRDS(response, write_rds_path)
base::Sys.sleep(0.6)
base::message(i, " of ", length(column))
base::message("status_id: ", to_annotate_id, "\n", "instruction: ", instruction, "\n", "text: ", to_annotate_text)
base::message("Claude: ", to_annotate_claudeLabel, "\n")
# Append the result to the dataframe
result_df <- rbind(result_df, data.frame(id = to_annotate_id, aitag = to_annotate_claudeLabel, stringsAsFactors = FALSE))
}, silent = FALSE)
if (!success) {
base::Sys.sleep(2)
attempt <- attempt + 1
}
}
if (!success) {
base::stop("Failed to fetch data after ", max_attempts, " attempts.")
}
}
return(result_df)
}
my_data <- data.frame(
id = 1:3,
text = c("Example text 1", "Example text 2", "Example text 3")
)
tag_claude(my_data$text, "Be precise and concise.")
my_data <- data.frame(
id = 1:3,
text = c("Example text 1", "Example text 2", "Example text 3")
)
tag_claude(my_data$text, "Be precise and concise.")
library(httr)
library(jsonlite)
Sys.setenv("anthropic_api_key" = "")
Sys.setenv("anthropic_url" = "http://127.0.0.1:8081/")
tag_claude <- function(column,
instruction = "fdsafsdafsda",
temperature = 0.5,
api_key = Sys.getenv("anthropic_api_key"),
model = "claude-3-opus-20240229",
api_url = Sys.getenv("anthropic_url")) {
columnname <- base::deparse(base::substitute(column))
filepath <- stringr::str_c("LLMoutput/", columnname, "/", model, "/")
api_url <- stringr::str_c(api_url, "/v1/messages")
if (!base::dir.exists(filepath)) {
base::dir.create(filepath, recursive = TRUE)
}
base::print(paste("Writing RDS file to:", filepath))
result_df <- data.frame(id = character(), aitag = character(), stringsAsFactors = FALSE)
for (i in 1:length(column)) {
to_annotate_id <- column[i]
to_annotate_text <- stringr::str_replace_all(column[i], "(\n|\r)", " ")
authorization <- paste0("Bearer ", api_key)
#retry times
attempt <- 1
max_attempts <- 3
success <- FALSE
while (!success && attempt <= max_attempts) {
try({
response <- httr::POST(
url = api_url,
httr::add_headers(`Content-Type` = "application/json", `Authorization` = authorization),
encode = "json",
body = list(
model = model,
temperature = temperature,
messages = list(
list(role = "system", content = instruction),
list(role = "user", content = to_annotate_text)
)
),
httr::timeout(5000)
)
success <- TRUE
to_annotate_claudeLabel <- httr::content(response)$choices[[1]]$message$content
write_rds_path <- stringr::str_c(filepath, to_annotate_id, ".rds")
base::saveRDS(response, write_rds_path)
base::Sys.sleep(0.6)
base::message(i, " of ", length(column))
base::message("status_id: ", to_annotate_id, "\n", "instruction: ", instruction, "\n", "text: ", to_annotate_text)
base::message("Claude: ", to_annotate_claudeLabel, "\n")
# Append the result to the dataframe
result_df <- rbind(result_df, data.frame(id = to_annotate_id, aitag = to_annotate_claudeLabel, stringsAsFactors = FALSE))
}, silent = FALSE)
if (!success) {
base::Sys.sleep(2)
attempt <- attempt + 1
}
}
if (!success) {
base::stop("Failed to fetch data after ", max_attempts, " attempts.")
}
}
return(result_df)
}
my_data <- data.frame(
id = 1:3,
text = c("Example text 1", "Example text 2", "Example text 3")
)
tag_claude(my_data$text, "Be precise and concise.")
# 设置代理
proxy_url <- "http://127.0.0.1:8081/v1/messages"  # 替换为你的代理服务器地址
# 准备请求的头部和数据
headers <- add_headers(Authorization = paste("Bearer", api_key), `Content-Type` = "application/json")
body <- list(
model = "claude-3-opus-20240229",
messages = list(list(role = "user", content = "Hello, how can I improve my Python skills?"))
)
# 设置API密钥和URL
api_key <- ""
url <- "https://api.anthropic.com/v1/messages"
# 设置代理
proxy_url <- "http://127.0.0.1:8081/v1/messages"  # 替换为你的代理服务器地址
# 准备请求的头部和数据
headers <- add_headers(Authorization = paste("Bearer", api_key), `Content-Type` = "application/json")
body <- list(
model = "claude-3-opus-20240229",
messages = list(list(role = "user", content = "Hello, how can I improve my Python skills?"))
)
# 发送POST请求
response <- POST(url, config = use_proxy(url = proxy_url), body = toJSON(body), encode = "json", headers)
# 发送POST请求
response <- POST(url, config = use_proxy(url = proxy_url), body = toJSON(body), encode = "json", headers)
# 检查响应状态并打印结果
if (status_code(response) == 200) {
print(content(response, "text"))
} else {
print(paste("Failed to get response:", status_code(response)))
}
devtool::document()
devtools::document()
devtool::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
install.packages("yifeifrank/aitag")
devtools::document
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages("devtools")
devtools::document()
devtools::chect()
devtools::check()
devtools::check()
devtools::check()
